// User validation utilities with TypeScript interfaces

interface NameValidationOptions { required?: boolean; minLength?: number; fieldName?: string; } interface EmailValidationOptions { required?: boolean; } interface PhoneValidationOptions { required?: boolean; } interface DateValidationOptions { required?: boolean; pastOnly?: boolean; minAge?: number; } interface PasswordValidationOptions { required?: boolean; requireLowercase?: boolean; requireUppercase?: boolean; requireNumber?: boolean; requireSpecial?: boolean; minLength?: number; } interface ValidationResult { isValid: boolean; error?: string; } export const validateName = (value: string, options: NameValidationOptions = {}): ValidationResult => { const { required = true, minLength = 2, fieldName = 'Name' } = options; if (required && (!value || value.trim() === '')) return { isValid: false, error: fieldName + ' is required' }; if (value && value.trim().length < minLength) return { isValid: false, error: fieldName + ' must be at least ' + minLength + ' characters' }; return { isValid: true }; }; export const validateEmail = (email: string, options: EmailValidationOptions = {}): ValidationResult => { const { required = true } = options; if (required && (!email || email.trim() === '')) return { isValid: false, error: 'Email is required' }; const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/; if (email && !emailRegex.test(email)) return { isValid: false, error: 'Please enter a valid email address' }; return { isValid: true }; }; export const validatePassword = (password: string, options: PasswordValidationOptions = {}): ValidationResult => { const { required = true, requireLowercase = true, requireUppercase = true, requireNumber = true, requireSpecial = true, minLength = 8 } = options; if (required && (!password || password.trim() === '')) return { isValid: false, error: 'Password is required' }; if (password && password.length < minLength) return { isValid: false, error: 'Password must be at least ' + minLength + ' characters' }; return { isValid: true }; };


export const calculateAge = (birthDate: Date): number => { const today = new Date(); const age = today.getFullYear() - birthDate.getFullYear(); const monthDiff = today.getMonth() - birthDate.getMonth(); if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) { return age - 1; } return age; };

export const validatePasswordConfirmation = (password: string, confirmation: string): ValidationResult => { if (password !== confirmation) return { isValid: false, error: 'Passwords do not match' }; return { isValid: true }; };

export const debounce = (func: Function, wait: number): Function => { let timeout: NodeJS.Timeout; return function executedFunction(...args: any[]) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; };
